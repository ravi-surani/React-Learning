{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react\\\\task2\\\\src\\\\Components\\\\Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    optionArray,\n    onSelectedchange,\n    selected\n  } = _ref;\n  const [open, setopen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    document.body.addEventListener('click', event => {\n      console.log(ref.current);\n\n      if (ref.current.contains(event.target)) {\n        return;\n      }\n    });\n  });\n  const renderOptions = optionArray.map(option => {\n    if (selected.value == option.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => {\n        onSelectedchange(option);\n      },\n      children: option.lable\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lable\",\n        children: \" Select Lable Color \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          setopen(!open);\n        },\n        className: `ui selection dropdown ${open ? 'visible active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: [\" \", selected.lable, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `menu ${open ? 'visible transition' : ''}`,\n          children: renderOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dropdown, \"5YPyqnX71HLtxhdFK0iCSta3BeM=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["C:/xampp/htdocs/react/task2/src/Components/Dropdown.js"],"names":["React","useEffect","useState","useRef","Dropdown","optionArray","onSelectedchange","selected","open","setopen","ref","document","body","addEventListener","event","console","log","current","contains","target","renderOptions","map","option","value","lable"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,QAAQ,GAAG,QAAiD;AAAA;;AAAA,MAAhD;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,gBAAf;AAAiCC,IAAAA;AAAjC,GAAgD;AAC9D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMQ,GAAG,GAAGP,MAAM,EAAlB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAyCC,KAAD,IAAW;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,OAAhB;;AACA,UAAGP,GAAG,CAACO,OAAJ,CAAYC,QAAZ,CAAqBJ,KAAK,CAACK,MAA3B,CAAH,EAAsC;AACtC;AAAO;AACV,KAJD;AAKH,GANQ,CAAT;AAQA,QAAMC,aAAa,GAAGf,WAAW,CAACgB,GAAZ,CAAgBC,MAAM,IAAI;AAC5C,QAAIf,QAAQ,CAACgB,KAAT,IAAkBD,MAAM,CAACC,KAA7B,EAAoC;AAChC,aAAO,IAAP;AACH;;AACD,wBACI;AAAwB,MAAA,SAAS,EAAC,MAAlC;AAAyC,MAAA,OAAO,EAAE,MAAM;AACpDjB,QAAAA,gBAAgB,CAACgB,MAAD,CAAhB;AACH,OAFD;AAAA,gBAGKA,MAAM,CAACE;AAHZ,OAAUF,MAAM,CAACC,KAAjB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAXqB,CAAtB;AAaA,sBACI;AAAK,IAAA,GAAG,EAAEb,GAAV;AAAe,IAAA,SAAS,EAAC,SAAzB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,OAAO,EAAE,MAAM;AAChBD,UAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACH,SAFD;AAGI,QAAA,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAsB,EAAG,EAHrE;AAAA,gCAII;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,0BAAwBD,QAAQ,CAACiB,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAK,UAAA,SAAS,EAAG,QAAOhB,IAAI,GAAG,oBAAH,GAA0B,EAAG,EAAzD;AAAA,oBACKY;AADL;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA1CD;;GAAMhB,Q;;KAAAA,Q;AA4CN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nconst Dropdown = ({ optionArray, onSelectedchange, selected }) => {\r\n    const [open, setopen] = useState(false);\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        document.body.addEventListener('click', (event) => {\r\n            console.log(ref.current)\r\n            if(ref.current.contains(event.target)){\r\n            return}\r\n        });\r\n    });\r\n\r\n    const renderOptions = optionArray.map(option => {\r\n        if (selected.value == option.value) {\r\n            return null\r\n        }\r\n        return (\r\n            <div key={option.value} className=\"item\" onClick={() => {\r\n                onSelectedchange(option)\r\n            }}>\r\n                {option.lable}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div ref={ref} className=\"ui form\">\r\n            <div className=\"field\">\r\n                <div className=\"lable\"> Select Lable Color </div>\r\n                <div onClick={() => {\r\n                    setopen(!open)\r\n                }}\r\n                    className={`ui selection dropdown ${open ? 'visible active' : ''}`} >\r\n                    <i className=\"dropdown icon\"></i>\r\n                    <div className=\"text\"> {selected.lable} </div>\r\n                    <div className={`menu ${open ? 'visible transition' : ''}`}>\r\n                        {renderOptions}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dropdown "]},"metadata":{},"sourceType":"module"}